import pytest
import importlib

script = importlib.import_module("aci-preupgrade-validation-script")


ipv4_test_data = [
    ("10.0.0.1", "00001010000000000000000000000001"),
    ("10.255.200.99", "00001010111111111100100001100011"),
    ("172.16.10.123", "10101100000100000000101001111011"),
    ("172.17.0.1", "10101100000100010000000000000001"),
    ("172.17.10.123", "10101100000100010000101001111011"),
    ("192.168.1.1", "11000000101010000000000100000001"),
]
ipv6_test_data = [
    (
        "2001::1",
        (
            "0010000000000001"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000001"
        ),
    ),
    (
        "2001:dead:beef::1:2:3",
        (
            "0010000000000001"
            "1101111010101101"
            "1011111011101111"
            "0000000000000000"
            "0000000000000000"
            "0000000000000001"
            "0000000000000010"
            "0000000000000011"
        ),
    ),
    (
        "2001:df0:f2::f10",
        (
            "0010000000000001"
            "0000110111110000"
            "0000000011110010"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000111100010000"
        ),
    ),
    (
        "fe80::1234:5678:c0ff:ee00",
        (
            "1111111010000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0001001000110100"
            "0101011001111000"
            "1100000011111111"
            "1110111000000000"
        ),
    ),
    (
        "fe80:1234:5678:abcd:efff:cafe:babe:deca",
        (
            "1111111010000000"
            "0001001000110100"
            "0101011001111000"
            "1010101111001101"
            "1110111111111111"
            "1100101011111110"
            "1011101010111110"
            "1101111011001010"
        ),
    ),
    (
        "::1",
        (
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000001"
        ),
    ),
    (
        "2001:420:1101:1::",
        (
            "0010000000000001"
            "0000010000100000"
            "0001000100000001"
            "0000000000000001"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
            "0000000000000000"
        ),
    ),
]


@pytest.mark.parametrize(
    "ip, expected",
    ipv4_test_data + ipv6_test_data,
)
def test_ip_to_binary(ip, expected):
    result = script.IPAddress.ip_to_binary(ip)
    assert result == expected


@pytest.mark.parametrize(
    "ip, expected",
    ipv4_test_data,
)
def test_ipv4_to_binary(ip, expected):
    result = script.IPAddress.ipv4_to_binary(ip)
    assert result == expected


@pytest.mark.parametrize(
    "ip, expected",
    ipv6_test_data,
)
def test_ipv6_to_binary(ip, expected):
    result = script.IPAddress.ipv6_to_binary(ip)
    assert result == expected


@pytest.mark.parametrize(
    "ip, pfxlen, expected",
    [
        ("10.0.0.1", 8, "00001010"),
        ("10.255.200.99", 12, "000010101111"),
        ("172.16.10.123", 16, "1010110000010000"),
        ("172.17.0.1", 24, "101011000001000100000000"),
        ("172.17.10.123", 28, "1010110000010001000010100111"),
        ("192.168.1.1", 30, "110000001010100000000001000000"),
        ("2001::1", 16, "0010000000000001"),
        (
            "2001:dead:beef::1:2:3",
            64,
            (
                "0010000000000001"
                "1101111010101101"
                "1011111011101111"
                "0000000000000000"
            ),
        ),
        (
            "2001:df0:f2::f10",
            56,
            ("0010000000000001" "0000110111110000" "0000000011110010" "00000000"),
        ),
        (
            "fe80::1234:5678:c0ff:ee00",
            16,
            "1111111010000000",
        ),
        (
            "fe80:1234:5678:abcd:efff:cafe:babe:deca",
            96,
            (
                "1111111010000000"
                "0001001000110100"
                "0101011001111000"
                "1010101111001101"
                "1110111111111111"
                "1100101011111110"
            ),
        ),
        (
            "::1",
            128,
            (
                "0000000000000000"
                "0000000000000000"
                "0000000000000000"
                "0000000000000000"
                "0000000000000000"
                "0000000000000000"
                "0000000000000000"
                "0000000000000001"
            ),
        ),
        (
            "2001:420:1101:1::",
            64,
            (
                "0010000000000001"
                "0000010000100000"
                "0001000100000001"
                "0000000000000001"
            ),
        ),
    ],
)
def test_get_network_binary(ip, pfxlen, expected):
    result = script.IPAddress.get_network_binary(ip, pfxlen)
    assert result == expected


@pytest.mark.parametrize(
    "ip, subnet, expected",
    [
        ("10.0.0.1", "172.17.0.1/16", False),
        ("10.0.0.1", "172.17.0.10/16", False),
        ("172.17.0.1", "172.17.0.10/16", True),
        ("172.17.0.1", "172.18.0.1/16", False),
        ("172.17.0.1", "172.17.0.1/24", True),
        ("172.17.0.1", "172.17.1.1/24", False),
        ("2001::1", "2002::1/16", False),
        ("2001::1", "2001::10/16", True),
        ("2001::1", "2001::/16", True),
        ("2001:cafe:babe::1:2:3", "2001:cafe:babe:deca:fc0f:ffee:bad0:900d/48", True),
        ("2001:cafe:babe::1:2:3", "2001:cafe:babe:deca:fc0f:ffee:bad0:900d/80", False),
        ("fe80::1234:5678:c0ff:ee00", "fe80::/16", True),
        ("::1", "2001:420:1101:1::1/64", False),
    ],
)
def test_ip_in_subnet(ip, subnet, expected):
    result = script.IPAddress.ip_in_subnet(ip, subnet)
    assert result == expected
